{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red93\green216\blue255;\red65\green161\blue192;\red208\green168\blue255;\red208\green191\blue105;\red158\green241\blue221;
\red108\green121\blue134;\red161\green103\blue230;\red252\green106\blue93;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c62145\c94386\c86819;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 struct
\f1\b0 \cf4  \cf5 CartridgeContext\cf4  \{\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 fileName\cf4 : [\cf7 CChar\cf4 ] = \cf7 Array\cf4 <\cf7 CChar\cf4 >(repeating: \cf8 0\cf4  , count: \cf8 1024\cf4 );\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 romSize\cf4 : \cf7 UInt32\cf4  = \cf8 0\cf4 ;\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 romData\cf4 : \cf7 UnsafeMutableRawPointer\cf4 ?;\
    
\f0\b \cf2 var
\f1\b0 \cf4  \cf6 romHeader\cf4 : \cf7 UnsafeMutablePointer\cf4 <\cf9 RomHeader\cf4 >?;\
\}
\f0\b \cf2 \
func
\f1\b0 \cf4  \cf6 getCartridgeContext\cf4 (\cf6 fileURL\cf4 : \cf7 URL\cf4  ) -> CartridgeContext \{\
    \cf10 //Get the data from the rom file\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  data = 
\f0\b \cf2 try
\f1\b0 \cf4 ! \cf7 Data\cf4 (\cf11 contentsOf\cf4 : fileURL);\
    \cf10 //Store data in 8 bit array form\cf4 \
    
\f0\b \cf2 let
\f1\b0 \cf4  rData = [\cf7 UInt8\cf4 ](data)\
    
\f0\b \cf2 var
\f1\b0 \cf4  sizeInBytes: \cf7 UInt32\cf4  = \cf8 0\cf4 ;\
    \
    
\f0\b \cf2 for
\f1\b0 \cf4  _ 
\f0\b \cf2 in
\f1\b0 \cf4  rData \{\
        sizeInBytes+=\cf8 1\cf4 ;\
    \}\
    \
    
\f0\b \cf2 let
\f1\b0 \cf4  CartridgeContext = CartridgeContext(romSize: sizeInBytes, romData: rData);\
    
\f0\b \cf2 return
\f1\b0 \cf4  CartridgeContext;\
\
\} from cartridge.swift\
\

\f0\b \cf2 func
\f1\b0 \cf4  \cf6 selectedFileURL\cf4 (\cf6 completion\cf4 : 
\f0\b \cf2 @escaping
\f1\b0 \cf4  (\cf7 URL\cf4 ?) -> \cf7 Void\cf4 ) \{\
    
\f0\b \cf2 let
\f1\b0 \cf4  openPanel = NSOpenPanel()\
    openPanel.allowsMultipleSelection = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    openPanel.canChooseDirectories = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    openPanel.canCreateDirectories = 
\f0\b \cf2 false
\f1\b0 \cf4 \
    openPanel.canChooseFiles = 
\f0\b \cf2 true
\f1\b0 \cf4 \
    openPanel.allowedFileTypes = [\cf12 \cb3 "gb"\cf4 \cb3 ]\
    openPanel.\cf13 \cb3 begin\cf4 \cb3  \{ result 
\f0\b \cf2 in
\f1\b0 \cf4 \
        
\f0\b \cf2 if
\f1\b0 \cf4  result == NSApplication.ModalResponse.\cf13 \cb3 OK\cf4 \cb3  \{\
            
\f0\b \cf2 let
\f1\b0 \cf4  fileURL = openPanel.\cf11 urls\cf4 [\cf8 0\cf4 ]\
            completion(fileURL)\
        \} 
\f0\b \cf2 else
\f1\b0 \cf4  \{\
            completion(
\f0\b \cf2 nil
\f1\b0 \cf4 )\
        \}\
    \}\
\}}