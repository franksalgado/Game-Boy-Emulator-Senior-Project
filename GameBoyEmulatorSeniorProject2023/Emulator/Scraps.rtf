{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red31\green31\blue36;\red252\green95\blue163;
\red93\green216\blue255;\red65\green161\blue192;\red158\green241\blue221;\red208\green168\blue255;\red108\green121\blue134;
\red103\green183\blue164;\red208\green191\blue105;\red103\green183\blue164;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c100000\c100000\c85000;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98839\c37355\c63833;
\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c62145\c94386\c86819;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c63137\c40392\c90196;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf5 Instruction\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 instructionType\cf2 : \cf7 InstructionType\cf2 ?;\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 addressMode\cf2 : \cf7 AddressMode\cf2 ?;\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 registerOne\cf2 : \cf7 RegisterType\cf2 ?;\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 registerTwo\cf2 : \cf7 RegisterType\cf2 ?;\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 condition\cf2 : \cf7 ConditionType\cf2 ?;\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf6 parameter\cf2 : \cf8 UInt8\cf2 ?;\
    \cf9 /*\cf2 \
\cf9     init() \{\cf2 \
\cf9         instructionType = InstructionType.IN_NOP;\cf2 \
\cf9         addressMode = AddressMode.AM_IMP;\cf2 \
\cf9         registerOne = RegisterType.RT_NONE;\cf2 \
\cf9         registerTwo = RegisterType.RT_NONE;\cf2 \
\cf9         condition = ConditionType.CT_NONE;\cf2 \
\cf9         parameter = 0;\cf2 \
\cf9     \}\cf2 \
\cf9      */\cf2 \
\}\
\
\
\
\
\cf9 /*\cf2 \
\cf9 //Array Instructions\cf2 \
\cf9 var Instructions = Array<Instruction>(repeating: Instruction.init() , count: 0x100);\cf2 \
\cf9 //Gameboy CPU (LR35902) instruction set\cf2 \
\
\cf9 func SetInstructions() \{\cf2 \
\cf9    // var Instructions = Array<Instruction>(repeating: Instruction.init() , count: 0x100);\cf2 \
\cf9     Instructions[0x00].type = InstructionType.IN_NOP;\cf2 \
\cf9     Instructions[0x00].mode = AddressMode.AM_IMP;\cf2 \
\cf9     \cf2 \
\cf9     Instructions[0x01].type = InstructionType.IN_LD;\cf2 \
\cf9     Instructions[0x01].mode = AddressMode.AM_R_D16;\cf2 \
\cf9     Instructions[0x01].registerOne = RegisterType.RT_BC;\cf2 \
\cf9     \cf2 \
\cf9     Instructions[0x05].type = InstructionType.IN_DEC;\cf2 \
\cf9     Instructions[0x05].mode = AddressMode.AM_R;\cf2 \
\cf9     Instructions[0x05].registerOne = RegisterType.RT_B;\cf2 \
\cf9     \cf2 \
\cf9     Instructions[0x0E].type = InstructionType.IN_LD;\cf2 \
\cf9     Instructions[0x0E].mode = AddressMode.AM_R_D8;\cf2 \
\cf9     Instructions[0x0E].registerOne = RegisterType.RT_C;\cf2 \
\cf9 \}\cf2 \
\cf9 */\
\
\
\
\

\f1\b \cf4 if
\f0\b0 \cf2  CPUStateInstance.\cf10 currentOpcode\cf2  == \cf11 0x2A\cf2  \{\
        
\f1\b \cf4 let
\f0\b0 \cf2  value = register + \cf11 1\cf2 ;\
        \cf12 SetHLRegister\cf2 (\cf12 value\cf2 : value);\
    \}\
    
\f1\b \cf4 if
\f0\b0 \cf2  CPUStateInstance.\cf10 currentOpcode\cf2  == \cf11 0x3A\cf2  \{\
        
\f1\b \cf4 let
\f0\b0 \cf2  value = register - \cf11 1\cf2 ;\
        \cf12 SetHLRegister\cf2 (\cf12 value\cf2 : value);\
    \}\

\f1\b \cf4 var
\f0\b0 \cf2  value = \cf12 BusRead\cf2 (\cf12 address\cf2 : \cf12 GetHLRegister\cf2 ()) + \cf11 1\cf2 ;\
    \cf9 //emu cyc\cf2 \
    \cf9 //emu cyc\cf2 \
    \cf12 BusWrite\cf2 (\cf12 address\cf2 : \cf12 GetHLRegister\cf2 (), \cf12 value\cf2 : value);\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\fs26 \cf2  
\f1\b \cf4 var
\f0\b0 \cf2  fetchedData = \cf8 Int8\cf2 (\cf13 bitPattern\cf2 : \cf12 BusRead\cf2 (\cf12 address\cf2 : \cf10 CPUStateInstance\cf2 .\cf10 registersState\cf2 .\cf10 pc\cf2 ));\
\
\cf10 CPUStateInstance\cf2 .\cf10 registersState\cf2 .\cf10 pc\cf2  = \cf8 UInt16\cf2 (\cf8 truncatingIfNeeded\cf2 : \cf8 Int\cf2 (\cf10 CPUStateInstance\cf2 .\cf10 registersState\cf2 .\cf10 pc\cf2 ) + \cf8 Int\cf2 (fetchedData));}