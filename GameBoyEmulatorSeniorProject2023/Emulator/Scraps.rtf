{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red103\green183\blue164;\red208\green191\blue105;\red103\green183\blue164;\red108\green121\blue134;\red208\green168\blue255;
\red161\green103\blue230;\red65\green161\blue192;\red252\green106\blue93;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c81681\c65692\c99927;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 if
\f1\b0 \cf4  CPUStateInstance.\cf5 currentOpcode\cf4  == \cf6 0x2A\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  value = register + \cf6 1\cf4 ;\
        \cf7 SetHLRegister\cf4 (\cf7 value\cf4 : value);\
    \}\
    
\f0\b \cf2 if
\f1\b0 \cf4  CPUStateInstance.\cf5 currentOpcode\cf4  == \cf6 0x3A\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  value = register - \cf6 1\cf4 ;\
        \cf7 SetHLRegister\cf4 (\cf7 value\cf4 : value);\
    \}\

\f0\b \cf2 var
\f1\b0 \cf4  value = \cf7 BusRead\cf4 (\cf7 address\cf4 : \cf7 GetHLRegister\cf4 ()) + \cf6 1\cf4 ;\
    \cf8 //emu cyc\cf4 \
    \cf8 //emu cyc\cf4 \
    \cf7 BusWrite\cf4 (\cf7 address\cf4 : \cf7 GetHLRegister\cf4 (), \cf7 value\cf4 : value);\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\fs26 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  fetchedData = \cf9 Int8\cf4 (\cf10 bitPattern\cf4 : \cf7 BusRead\cf4 (\cf7 address\cf4 : \cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4 ));\
\
\
for debugging\
\cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4  = \cf9 UInt16\cf4 (\cf9 truncatingIfNeeded\cf4 : \cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4 ) + \cf9 Int\cf4 (fetchedData));\

\f0\b \cf2 func
\f1\b0 \cf4  \cf11 CPUStep\cf4 (\cf8 /*CPUStateInstance: CPUState*/\cf4 ) -> \cf9 Bool\cf4 \{\
    
\f0\b \cf2 if
\f1\b0 \cf4  !\cf5 CPUStateInstance\cf4 .halted \{\
        \cf10 print\cf4 (\cf12 "Iteration \cf4 \\(\cf5 i\cf4 )\cf12 \\n"\cf4 )\
\cf5 i\cf4  += \cf6 1\cf4 ;\
            print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "First print\\n"\cf4 );\
        \cf5 CPUStateInstance\cf4 .currentOpcode = BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc);\
        print(\cf12 "executing "\cf4 ,  \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].\cf13 name\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , \cf5 CPUStateInstance\cf4 .currentOpcode));\
        \cf8 //emu cyc\cf4 \
        \cf5 CPUStateInstance\cf4 .registersState.pc+=\cf6 1\cf4 ;\
        \cf10 print\cf4 (BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc));\
        \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].instructionFunction();\
            print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "second print\\n"\cf4 );\
    \}\
    
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 false
\f1\b0 \cf4 ;\
\}\
\
\
\
\
\
\
\cf8 //print(UInt16(truncatingIfNeeded: UInt16(Int(537) + Int(Int8(bitPattern: BusRead(address: 537))))))\cf4 \
\cf10 print\cf4 (\cf9 Int8\cf4 (\cf10 bitPattern\cf4 : BusRead(address: \cf6 518\cf4 )))\
\cf9 UInt16\cf4 (\cf9 truncatingIfNeeded\cf4 : \cf9 Int\cf4 (\cf6 519\cf4 ) + \cf9 Int\cf4 ( \cf9 Int8\cf4 (\cf10 bitPattern\cf4 : BusRead(address: \cf6 518\cf4 )) ) )\

\f0\b \cf2 while
\f1\b0 \cf4  !\cf5 CPUStateInstance\cf4 .halted \{\
    \cf8 // Code to be executed in each iteration\cf4 \
    \
    CPUStep();\
\}\
\
\
\cf8 //InstructionsTable[Int(CPUStateInstance.currentOpcode)].instructionFunction();\cf4 \
\

\f0\b \cf2 for
\f1\b0 \cf4  i 
\f0\b \cf2 in
\f1\b0 \cf4  \cf6 0x11\cf4 ...\cf6 0xFF\cf4  \{\
    \cf10 print\cf4 (\cf12 "Iteration \cf4 \\(\cf5 i\cf4 )\cf12 \\n"\cf4 )\
    print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "First print\\n"\cf4 , \cf12 "HL: "\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , GetHLRegister()));\
    \cf8 // Code to be executed in each iteration\cf4 \
    print(\cf12 "executing "\cf4 ,  \cf5 InstructionsTable\cf4 [\cf5 i\cf4 ].\cf13 name\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , \cf5 i\cf4 ));\
    \cf5 InstructionsTable\cf4 [\cf5 i\cf4 ].instructionFunction();\
    \
    print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "second print\\n"\cf4 , \cf12 "HL: "\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , GetHLRegister()));\
\}\
\
\cf8 /*\cf4 \
\cf8 SetHLRegister(value: 0x9F0F)\cf4 \
\cf8 print(CPUStateInstance.registersState, "First print\\n", "HL: ", String(format: "0x%X", GetHLRegister()));\cf4 \
\cf8 print("executing ",  InstructionsTable[0x29].name);\cf4 \
\cf8 InstructionsTable[0x29].instructionFunction();\cf4 \
\cf8 print(CPUStateInstance.registersState, "second print\\n", "HL: ", String(format: "0x%X", GetHLRegister()));\cf4 \
\cf8 */\
\
\
\
emulator starts with\
getcartridgestate\
then generate instruction table\
start emulator\
cpu step\

\f0\b \cf2 var
\f1\b0 \cf4  \cf11 fileURL\cf4 : \cf9 URL\cf4  = \cf9 URL\cf4 (\cf10 string\cf4 : \cf12 "file:///Users/franksalgado/Documents/roms/01-special.gb"\cf4 )!;\
\
\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0\b \cf4 \cb1 \CocoaLigature0 Registers(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 86, sp: 65534, pc: 518) second print\
\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 86, sp: 65534, pc: 518) First print\
\
executing  LDAAddressHLInc 0x2A\
18\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 87, sp: 65534, pc: 521) second print\
\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 87, sp: 65534, pc: 521) First print\
\
executing  JRNZr8 0x20\
251\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 87, sp: 65534, pc: 518) second print\
\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 87, sp: 65534, pc: 518) First print\
\
executing  LDAAddressHLInc 0x2A\
18\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 88, sp: 65534, pc: 521) second print\
\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 88, sp: 65534, pc: 521) First print\
\
executing  JRNZr8 0x20\
251\
CPURegisters(a: 0, f: 0, b: 1, c: 16, d: 192, e: 0, h: 116, l: 88, sp: 65534, pc: 518) second print\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f1\b0 \cf4 \cb3 \CocoaLigature1 \
\
\

\f0\b \cf2 var
\f1\b0 \cf4  \cf11 i\cf4  = \cf6 0\cf4 ;\

\f0\b \cf2 func
\f1\b0 \cf4  \cf11 CPUStep\cf4 () -> \cf9 Bool\cf4 \{\
print(\cf12 "Interation: "\cf4 , \cf5 i\cf4 , \cf12 "\\n"\cf4 );\
    \cf5 i\cf4  += \cf6 1\cf4 ;\
    
\f0\b \cf2 if
\f1\b0 \cf4  !\cf5 CPUStateInstance\cf4 .halted \{\
        print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "First print\\n"\cf4 , \cf12 "\\nHL: "\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , GetHLRegister()), \cf12 "\\n"\cf4 );\
        \
        \
        \cf5 CPUStateInstance\cf4 .currentOpcode = BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc);\
        \
        \
        print(\cf12 "executing "\cf4 ,  \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].\cf13 name\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , \cf5 CPUStateInstance\cf4 .currentOpcode));\
        \
        \
        EmulatorCycles(CPUCycles: \cf6 1\cf4 );\
        \cf5 CPUStateInstance\cf4 .registersState.pc+=\cf6 1\cf4 ;\
        \
        \
        print(\cf12 "Next opcode: "\cf4 , BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc));\
        \cf8 //TestRomWrite();\cf4 \
        \cf8 //TestRomRead();\cf4 \
        \
        \
        \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].instructionFunction();\
        \
        \
        print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 "second print\\n"\cf4 , \cf12 "\\nHL: "\cf4 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 "0x%X"\cf4 , GetHLRegister()), \cf12 "\\n"\cf4 );\
\pard\tx692\pardeftab692\pardirnatural\partightenfactor0

\fs28 \cf4 \cb3   
\f0\b \cf2 let
\f1\b0 \cf4  messageString = \cf9 String\cf4 (\cf5 TestRomMessage\cf4 .\cf10 map\cf4  \{ \cf9 Character\cf4 (\cf9 UnicodeScalar\cf4 ($0)) \})\
        
\f0\b \cf2 if
\f1\b0 \cf4  messageString.\cf10 contains\cf4 (\cf12 "Passed"\cf4 ) \{\
            \cf10 print\cf4 (messageString)\
        \}}