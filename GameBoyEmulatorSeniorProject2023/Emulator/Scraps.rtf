{\rtf1\ansi\ansicpg1252\cocoartf2707
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red252\green95\blue163;\red31\green31\blue36;\red255\green255\blue255;
\red103\green183\blue164;\red208\green191\blue105;\red103\green183\blue164;\red108\green121\blue134;\red208\green168\blue255;
\red161\green103\blue230;\red65\green161\blue192;\red252\green106\blue93;\red161\green103\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c40392\c71765\c64314;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c81681\c65692\c99927;
\csgenericrgb\c63137\c40392\c90196;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c63232\c40219\c90115;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 \cb3 if
\f1\b0 \cf4  CPUStateInstance.\cf5 currentOpcode\cf4  == \cf6 0x2A\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  value = register + \cf6 1\cf4 ;\
        \cf7 SetHLRegister\cf4 (\cf7 value\cf4 : value);\
    \}\
    
\f0\b \cf2 if
\f1\b0 \cf4  CPUStateInstance.\cf5 currentOpcode\cf4  == \cf6 0x3A\cf4  \{\
        
\f0\b \cf2 let
\f1\b0 \cf4  value = register - \cf6 1\cf4 ;\
        \cf7 SetHLRegister\cf4 (\cf7 value\cf4 : value);\
    \}\

\f0\b \cf2 var
\f1\b0 \cf4  value = \cf7 BusRead\cf4 (\cf7 address\cf4 : \cf7 GetHLRegister\cf4 ()) + \cf6 1\cf4 ;\
    \cf8 //emu cyc\cf4 \
    \cf8 //emu cyc\cf4 \
    \cf7 BusWrite\cf4 (\cf7 address\cf4 : \cf7 GetHLRegister\cf4 (), \cf7 value\cf4 : value);\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\fs26 \cf4  
\f0\b \cf2 var
\f1\b0 \cf4  fetchedData = \cf9 Int8\cf4 (\cf10 bitPattern\cf4 : \cf7 BusRead\cf4 (\cf7 address\cf4 : \cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4 ));\
\
\
for debugging\
\cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4  = \cf9 UInt16\cf4 (\cf9 truncatingIfNeeded\cf4 : \cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .\cf5 registersState\cf4 .\cf5 pc\cf4 ) + \cf9 Int\cf4 (fetchedData));\

\f0\b \cf2 func
\f1\b0 \cf4  \cf11 \cb3 CPUStep\cf4 \cb3 (\cf8 \cb3 /*CPUStateInstance: CPUState*/\cf4 \cb3 ) -> \cf9 Bool\cf4 \{\
    
\f0\b \cf2 if
\f1\b0 \cf4  !\cf5 CPUStateInstance\cf4 .halted \{\
        \cf10 print\cf4 (\cf12 \cb3 "Iteration \cf4 \cb3 \\(\cf5 i\cf4 )\cf12 \cb3 \\n"\cf4 \cb3 )\
\cf5 i\cf4  += \cf6 \cb3 1\cf4 \cb3 ;\
            print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 \cb3 "First print\\n"\cf4 \cb3 );\
        \cf5 CPUStateInstance\cf4 .currentOpcode = BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc);\
        print(\cf12 \cb3 "executing "\cf4 \cb3 ,  \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].\cf13 \cb3 name\cf4 \cb3 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 \cb3 "0x%X"\cf4 \cb3 , \cf5 CPUStateInstance\cf4 .currentOpcode));\
        \cf8 \cb3 //emu cyc\cf4 \cb3 \
        \cf5 CPUStateInstance\cf4 .registersState.pc+=\cf6 \cb3 1\cf4 \cb3 ;\
        \cf10 print\cf4 (BusRead(address: \cf5 CPUStateInstance\cf4 .registersState.pc));\
        \cf5 InstructionsTable\cf4 [\cf9 Int\cf4 (\cf5 CPUStateInstance\cf4 .currentOpcode)].instructionFunction();\
            print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 \cb3 "second print\\n"\cf4 \cb3 );\
    \}\
    
\f0\b \cf2 return
\f1\b0 \cf4  
\f0\b \cf2 false
\f1\b0 \cf4 ;\
\}\
\
\
\
\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf8 \cb3 //print(UInt16(truncatingIfNeeded: UInt16(Int(537) + Int(Int8(bitPattern: BusRead(address: 537))))))\cf4 \cb3 \
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf10 print\cf4 (\cf9 Int8\cf4 (\cf10 bitPattern\cf4 : BusRead(address: \cf6 \cb3 518\cf4 \cb3 )))\
\cf9 UInt16\cf4 (\cf9 truncatingIfNeeded\cf4 : \cf9 Int\cf4 (\cf6 \cb3 519\cf4 \cb3 ) + \cf9 Int\cf4 ( \cf9 Int8\cf4 (\cf10 bitPattern\cf4 : BusRead(address: \cf6 \cb3 518\cf4 \cb3 )) ) )\

\f0\b \cf2 while
\f1\b0 \cf4  !\cf5 CPUStateInstance\cf4 .halted \{\
    \cf8 \cb3 // Code to be executed in each iteration\cf4 \cb3 \
    \
    CPUStep();\
\}\
\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf8 \cb3 //InstructionsTable[Int(CPUStateInstance.currentOpcode)].instructionFunction();\cf4 \cb3 \
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0

\f0\b \cf2 for
\f1\b0 \cf4  i 
\f0\b \cf2 in
\f1\b0 \cf4  \cf6 \cb3 0x11\cf4 \cb3 ...\cf6 \cb3 0xFF\cf4 \cb3  \{\
    \cf10 print\cf4 (\cf12 \cb3 "Iteration \cf4 \cb3 \\(\cf5 i\cf4 )\cf12 \cb3 \\n"\cf4 \cb3 )\
    print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 \cb3 "First print\\n"\cf4 \cb3 , \cf12 \cb3 "HL: "\cf4 \cb3 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 \cb3 "0x%X"\cf4 \cb3 , GetHLRegister()));\
    \cf8 \cb3 // Code to be executed in each iteration\cf4 \cb3 \
    print(\cf12 \cb3 "executing "\cf4 \cb3 ,  \cf5 InstructionsTable\cf4 [\cf5 i\cf4 ].\cf13 \cb3 name\cf4 \cb3 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 \cb3 "0x%X"\cf4 \cb3 , \cf5 i\cf4 ));\
    \cf5 InstructionsTable\cf4 [\cf5 i\cf4 ].instructionFunction();\
    \
    print(\cf5 CPUStateInstance\cf4 .registersState, \cf12 \cb3 "second print\\n"\cf4 \cb3 , \cf12 \cb3 "HL: "\cf4 \cb3 , \cf9 String\cf4 (\cf9 format\cf4 : \cf12 \cb3 "0x%X"\cf4 \cb3 , GetHLRegister()));\
\}\
\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf8 \cb3 /*\cf4 \cb3 \
\cf8 \cb3 SetHLRegister(value: 0x9F0F)\cf4 \cb3 \
\cf8 \cb3 print(CPUStateInstance.registersState, "First print\\n", "HL: ", String(format: "0x%X", GetHLRegister()));\cf4 \cb3 \
\cf8 \cb3 print("executing ",  InstructionsTable[0x29].name);\cf4 \cb3 \
\cf8 \cb3 InstructionsTable[0x29].instructionFunction();\cf4 \cb3 \
\cf8 \cb3 print(CPUStateInstance.registersState, "second print\\n", "HL: ", String(format: "0x%X", GetHLRegister()));\cf4 \cb3 \
\cf8 \cb3 */\
\
\
\
emulator starts with\
getcartridgestate\
then generate instruction table\
start emulator\
cpu step\
\pard\tx642\pardeftab642\pardirnatural\partightenfactor0
\cf4 \cb3 \
}